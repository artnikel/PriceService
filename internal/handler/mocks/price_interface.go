// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/artnikel/PriceService/internal/model"

	proto "github.com/artnikel/PriceService/proto"

	uuid "github.com/google/uuid"
)

// PriceInterface is an autogenerated mock type for the PriceInterface type
type PriceInterface struct {
	mock.Mock
}

// AddSubscriber provides a mock function with given fields: subscriberID, selectedActions
func (_m *PriceInterface) AddSubscriber(subscriberID uuid.UUID, selectedActions []string) error {
	ret := _m.Called(subscriberID, selectedActions)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, []string) error); ok {
		r0 = rf(subscriberID, selectedActions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscriber provides a mock function with given fields: subscriberID
func (_m *PriceInterface) DeleteSubscriber(subscriberID uuid.UUID) error {
	ret := _m.Called(subscriberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(subscriberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadPrices provides a mock function with given fields: ctx
func (_m *PriceInterface) ReadPrices(ctx context.Context) ([]*model.Share, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Share
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Share); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Share)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendToAllSubscribedChans provides a mock function with given fields: ctx
func (_m *PriceInterface) SendToAllSubscribedChans(ctx context.Context) {
	_m.Called(ctx)
}

// SendToSubscriber provides a mock function with given fields: ctx, subscriberID
func (_m *PriceInterface) SendToSubscriber(ctx context.Context, subscriberID uuid.UUID) ([]*proto.Shares, error) {
	ret := _m.Called(ctx, subscriberID)

	var r0 []*proto.Shares
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*proto.Shares); ok {
		r0 = rf(ctx, subscriberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Shares)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, subscriberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPriceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceInterface creates a new instance of PriceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceInterface(t mockConstructorTestingTNewPriceInterface) *PriceInterface {
	mock := &PriceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
